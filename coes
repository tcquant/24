import psycopg2
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots





def fetch_options(cursor, symbol, expiry):
    cursor.execute(
        f'''
        SELECT * 
        FROM ohlcv_options_per_minute oopm
        WHERE symbol = '{symbol}'
        AND expiry_type = 'I'
        AND expiry = '{expiry}'
        ORDER BY date_timestamp;
        '''
    )
    rows = cursor.fetchall()
    df = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])
    return df


def fetch_futures(cursor, symbol, x=12):
    query = f'''
        SELECT *
        FROM ohlcv_future_per_minute ofpm 
        WHERE ofpm.symbol = '{symbol}'
        AND ofpm.expiry_type = 'I'
        AND ofpm.expiry = (
            SELECT ofpem.expiry 
            FROM ohlcv_future_per_minute ofpem 
            WHERE ofpem.symbol = '{symbol}'
            AND ofpem.expiry_type = 'I'
            GROUP BY ofpem.expiry 
            OFFSET {x} 
            LIMIT 1
        )
        ORDER BY date_timestamp ASC
    '''
    cursor.execute(query, (symbol, symbol, x))
    rows = cursor.fetchall()
    df = pd.DataFrame(rows, columns=[desc[0] for desc in cursor.description])
    return df



conn = psycopg2.connect(
           dbname="qdap_test",
           user="amt",
           password="your_password",
           host="192.168.2.23",
           port="5432"
       )

# Create a cursor object using the cursor() method
cursor = conn.cursor()
symbol = 'BANKNIFTY'
future_data = fetch_futures(cursor, symbol)
future_data['date_timestamp'] = pd.to_datetime(future_data['date_timestamp'])
future_data.set_index('date_timestamp', inplace=True)
future_data.to_excel('bnf.xlsx')


short_window = 9
long_window = 26
future_data['Short_EMA'] = future_data['close'].ewm(span=short_window, adjust=False).mean()
future_data['Long_EMA'] = future_data['close'].ewm(span=long_window, adjust=False).mean()

future_data



# Initialize 'Signal' and 'Position' columns
future_data['Signal'] = 0
future_data['Position'] = 0

future_data



for i in range(1, len(future_data)):
    if future_data['Short_EMA'].iloc[i] > future_data['Long_EMA'].iloc[i] and future_data['Short_EMA'].iloc[i-1] <= future_data['Long_EMA'].iloc[i-1]:
        future_data.at[future_data.index[i], 'Signal'] = 1  # Buy signal
    elif future_data['Short_EMA'].iloc[i] < future_data['Long_EMA'].iloc[i] and future_data['Short_EMA'].iloc[i-1] >= future_data['Long_EMA'].iloc[i-1]:
        future_data.at[future_data.index[i], 'Signal'] = -1  # Sell signal

# Display the DataFrame with signals
print(future_data)


fig = make_subplots(rows=1, cols=1)

# Candlestick chart
candlestick = go.Candlestick(x=future_data.index,
                             open=future_data['open'],
                             high=future_data['high'],
                             low=future_data['low'],
                             close=future_data['close'],
                             name='Candlesticks')
fig.add_trace(candlestick)

# Short EMA
short_ema = go.Scatter(x=future_data.index, y=future_data['Short_EMA'], mode='lines', name='Short EMA')
fig.add_trace(short_ema)

# Long EMA
long_ema = go.Scatter(x=future_data.index, y=future_data['Long_EMA'], mode='lines', name='Long EMA')
fig.add_trace(long_ema)

# Buy signals
buy_signals = go.Scatter(x=future_data[future_data['Signal'] == 1].index, 
                         y=future_data['Short_EMA'][future_data['Signal'] == 1], 
                         mode='markers', 
                         marker=dict(symbol='triangle-up', color='blue', size=5), 
                         name='Buy Signal')
fig.add_trace(buy_signals)

# Sell signals
sell_signals = go.Scatter(x=future_data[future_data['Signal'] == -1].index, 
                          y=future_data['Short_EMA'][future_data['Signal'] == -1], 
                          mode='markers', 
                          marker=dict(symbol='triangle-down', color='black', size=5), 
                          name='Sell Signal')
fig.add_trace(sell_signals)


fig.update_layout(title=f'{symbol} EMA Crossover Strategy',
                  yaxis_title='Price',
                  xaxis_title='Date',
                  xaxis_rangeslider_visible=False,
                  width=1440,  # Adjust the width as needed
                  height=400)  # Adjust the height as needed

# Show plot
fig.show()




position_size = 1  
current_position = 0  # Track current position (1 for long, -1 for short, 0 for neutral)
entry_price = 0  # Track entry price
total_pnl = 0  # Total P&L

# Iterate through each row in the DataFrame
for index, row in future_data.iterrows():
    if row['Signal'] == 1 and current_position == 0:  # Buy signal and no current position
        current_position = 1
        # print("entry")
        entry_price = row['close']
    elif row['Signal'] == -1 and current_position == 1:  # Sell signal and long position
        pnl = (row['close'] - entry_price) * position_size
        total_pnl += pnl
        # print("close")
        current_position = 0
        entry_price = 0
    elif row['Signal'] == -1 and current_position == 0:  # Sell signal but no current long position
        continue  # Can't sell if not long
        
# Print total P&L
print(f'Total P&L: {total_pnl}')




import pandas as pd

# Assuming 'data' is your DataFrame containing the 'expiry' column
ex = future_data['expiry'].iloc[0]  # Use iloc to access the first element by position

# Assuming fetch_options is defined to fetch data based on 'symbol' and 'expiry'
cursor1 = conn.cursor()
df = fetch_options(cursor1, symbol=symbol, expiry=ex)

df



options_ce = df[df['opt_type']=='CE']
options_pe = df[df['opt_type']=='PE']
options_ce_sp = options_ce[options_ce['strike']==4100000]
options_ce_sp




# Initialize variables
buy_call_entries = []
close_put_entries = []
current_position = 0  # Track current position (1 for long, -1 for short, 0 for neutral)
entry_price_call = 0  # Track entry price for call option
entry_price_put = 0  # Track entry price for put option
total_pnl = 0  # Total P&L

sum = 0

for index, row in future_data.iterrows():
    if row['Signal'] == 1 and current_position == 0:  # Buy signal and no current position
        current_position = 1
        atm_call_option = options_ce.loc[options_ce['strike'].sub(row['close']).abs().idxmin() ]
        sum -= (atm_call_option['close']) 
        print(atm_call_option['close'])
    elif row['Signal'] == -1 and current_position == 1:
        atm_call_option = options_ce.loc[options_ce['strike'].sub(row['close']).abs().idxmin() ]
        current_position = 0
        sum += (atm_call_option['close']) 
        print(atm_call_option['close'])
        
   

print(sum)
# Print buy call entries
print("Buy Call Entries:")
for entry in buy_call_entries:
    print(f'Timestamp: {entry["timestamp"]}, Buy Call, Strike Price: {entry["strike_price"]}, Entry Price: {entry["entry_price"]}')

# Print close put entries
print("Close Put Entries:")
for entry in close_put_entries:
    print(f'Timestamp: {entry["timestamp"]}, Close Put, Strike Price: {entry["strike_price"]}, Entry Price: {entry["entry_price"]}, P&L: {entry["pnl"]}')

# Print total P&L
print(f'Total P&L: {total_pnl}')






